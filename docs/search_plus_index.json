{"./":{"url":"./","title":"简介","keywords":"","body":"简单介绍 Gitbook是什么？其实用一句话就可以概括，它是一个 能将使用 Markown 语法的 md 格式文档，快速制作成各种格式电子书的工具。 常被用于编写文档或者电子书，特点是方便简洁，易于使用。只要熟悉轻量级标记语法的 Markdown 语法，就能使用Gitbook 来制作各种格式的电子书。 Gitbook 生成电子书主要有三种方式： gitbook-cli 命令行操作,简洁高效,适合从事软件开发的相关人员。 gitbook-editor 编辑器操作,可视化编辑,适合无编程经验的文学创作者。 gitbook.com 官网操作,在线编辑实时发布,适合无本地环境且科学上网的体验者。 本文主要讲解第一种 gitbook-cli 命令行操作流程。 [!TIP] 因为gitbook-cli停止维护了，所以在新版本的nodejs环境安装gitbook-cli会出现许多问题，比如TypeError: cb.apply is not a function和gitbook init报TypeError ERR_INVALID_ARG_TYPE，要么降级到对应的nodejs版本使用，要么像前面两个链接里的那样去修改程序代码以使程序正常运行。而Honkit是一个仍然在更新的Gitbook分支，关于HonKit的介绍，可以去他的github页面或者文档查看。 参考：JiangMing-Gitbook详细教程、GitBook使用教程、GitBook简明教程、云原生Gitbook文档、 gitbook/honkit的快速入手、MarkDown官方教程 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 11:03:54 "},"1-windows-install.html":{"url":"1-windows-install.html","title":"Windows安装","keywords":"","body":"Node.js安装(Windows) 要使用 GitBook 我们得先安装它的命令行工具 gitbook-cli。而安装 gitbook-cli 得先安装 Node.js。 进入Node.js官网下载安装包并运行（根据自己电脑选择32位还是64位）。 选择安装路径，然后点击下一步 这里四项全部安装，点击下一步 这里不用打勾✔，下一步 选择Install安装，等安装完成即可 进入命令提示符窗口，分别输入以下命令，显示版本号，则安装成功 node -v # 显示安装的nodejs版本 npm -v # 显示安装的npm版本 修改全局模块路径和缓存路径（可选） 当我们在执行npm install express -g命令时，g表示global全局。会默认下载到c盘，它的默认路径为：【C:\\Users\\用户名\\AppData\\Roaming\\npm】。 在Node.js安装目录下创建两个文件夹，node_global和node_cache 设置node_global和node_cache权限 win+R打开运行窗口，输入cmd，再执行以下两条指令 npm config set prefix \"node_global文件夹所在路径\" npm config set cache \"node_cache文件夹所在路径\" 执行完毕后，再配置环境变量 右键此电脑——>高级系统设置——>环境变量 在系统变量中，新建，变量名：NODE_HOME 变量值：Node.js安装路径 在系统变量的Path中将原来Node.js路径修改为%NODE_HOME%，并添加%NODE_HOME%\\node_global 设置淘宝镜像 通过npm命令行工具设置全局镜像地址，可以持久保存在用户的npm配置中： npm config set registry https://registry.npmmirror.com/ 请注意，淘宝npm镜像原地址 https://registry.npm.taobao.org 在2022年6月30日后已不再可用，因此应使用新地址 https://registry.npmmirror.com/。 安装GitBook 打开cmd，执行gitbook-cli安装命令 npm install gitbook-cli -g 安装完成后，执行gitbook -V查看 gitbook-cli 版本号并安装 gitbook 本体。 [!Tip] 使用12.5.0以上的版本（只测试了12.4.1没问题，但网上有用12.8.3的报错的）才会有下面的报错，所以推荐使用10+至12.4.1的版本，10以下也会有问题。 不出意料，它报了一个错： 找到错误中那个 polyfills.js 文件的位置，即上图中画横线的部分。然后打开它，注释掉以下内容： 保存，重新 gitbook -V，应该就能安装成功了。 GitBook初始化错误 找到一个空文件夹，在该目录下打开cmd，执行gitbook init初始化一个书籍项目。不出意外，它又报错了： 打开\"C:\\Users\\用户名.gitbook\\versions\\3.2.3\\lib\\init.js\"这个文件将第 72 行的 return fs.writeFile(filePath, summary.toText(extension));修改为： return summary.toText(extension).then(stx=>{return fs.writeFile(filePath, stx);}); 保存，重新 gitbook init，就可以了。 这时我们会发现出现了两个文件：README.md 与 SUMMARY.md。README.md 是用来写简介的，SUMMARY.md 是用来写目录的。 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 16:24:20 "},"2-linux-install.html":{"url":"2-linux-install.html","title":"Linux安装","keywords":"","body":"Node.js安装(Linux) 依次执行以下命令（需要开启代理）： curl -fsSL https://fnm.vercel.app/install | bash source ~/.bashrc fnm use --install-if-missing 20 node -v # 显示安装的nodejs版本 npm -v # 显示安装的npm版本 显示版本则代表安装成功： GitBook安装 执行以下命令，安装gitbook-cli： npm install gitbook-cli -g 安装完成后，执行gitbook -V，此时会报一个错： 打开错误中的polyfills.js文件，注释掉以下内容： 保存，重新执行gitbook -V，等待GitBook 3.2.3安装完成。 GitBook初始化 打开 /root/.gitbook/versions/3.2.3/lib/init.js 这个文件，将第 72 行的 return fs.writeFile(filePath, summary.toText(extension));替换为： return summary.toText(extension).then(stx=>{return fs.writeFile(filePath, stx);}); 保存后，创建一个空文件夹，进入该文件夹并执行 gitbook init 这时会发现出现两个文件：README.md 与 SUMMARY.md。README.md 是用来写简介的，SUMMARY.md 是用来写目录的。 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 00:23:45 "},"3-gitbook-cli.html":{"url":"3-gitbook-cli.html","title":"命令行的使用","keywords":"","body":"GitBook命令行的使用 GitBook 的命令行工具其实就是 gitbook-cli ，可以通过命令的方式来创建，构造，安装插件，预览等功能。 查看帮助 Gitbook 和 Git 一样是一个命令行工具，开始介绍之前，先使用 gitbook help 命令来概览看一下 gitbook 主要的几个命令。 $ gitbook help build [book] [output] build a book --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) --format Format to build to (Default is website; Values are website, json, ebook) --[no-]timing Print timing debug information (Default is false) serve [book] [output] serve the book as a website for testing --port Port for server to listen on (Default is 4000) --lrport Port for livereload server to listen on (Default is 35729) --[no-]watch Enable file watcher and live reloading (Default is true) --[no-]live Enable live reloading (Default is true) --[no-]open Enable opening book in browser (Default is false) --browser Specify browser for opening book (Default is ) --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) --format Format to build to (Default is website; Values are website, json, ebook) install [book] install all plugins dependencies --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) parse [book] parse and print debug information about a book --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) init [book] setup and create files for chapters --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) pdf [book] [output] build a book into an ebook file --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) epub [book] [output] build a book into an ebook file --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) mobi [book] [output] build a book into an ebook file --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) [!WARNING|style:flat] 其中[]标记的是 可选参数 指令，但是有可能在某些平台中不生效甚至会报错。可能是 gitbook 在平台的兼容性上还不够完善原因导致的，如有参数使用的需求的情况，可以根据需要选择适合的平台来使用。目前笔者测试过在部分 Ubuntu 环境平台上部分参数指令可能无效（可能简写命令格式支持，或许支持完整参数格式又或许都不支持），但是在 Windows (windows 10) 平台上是可以使用的，具体的参数是否可正常的使用取决于不同平台的支持程度。 -- 标记的是可选的功能参数，如 --log 输出执行相关的log，具体功能描述参考上面help中后面的描述。 简单的了解一下这些参数吧： [book]：指定 gitbook 项目的目录 [output]：指定文件输出的目录 使用示例： # 在指定的/home/gitbook/目录中初始化一个书籍项目 $ gitbook init --book=/home/gitbook/ # 对应的简写格式 $ gitbook init /home/gitbook/ # 指定书籍项目目录在当前目录，并将编译构建后文件放到指定的当前目录下的mybook目录中 $ gitbook build --book=./ --output=./mybook # 对应的简写格式 $ gitbook build ./ ./mybook # 指定书籍项目目录在当前目录，导出 PDF 格式的电子书到指定的/home/pdf/目录中 $ gitbook pdf --book=./ --output=/home/pdf/ # 对应的简写格式 $ gitbook pdf ./ /home/pdf/ 初始化 使用 gitbook init 初始化一本书，本地会默认创建生成两个 markdown 格式的文件，这两个文件是必须存在的，一个是初始化页面，一个是电子书的目录结构定义文件。 # 电子书初始化 $ gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished # 查看初始化的目录结构 $ tree . ├── README.md └── SUMMARY.md 构建电子书 使用 git build 命令来生成静态网页格式的电子书。执行后会生成HTML静态资源输出到当前项目的目录下_book 目录中。 # 构建电子书 $ gitbook build info: 21 plugins are installed info: 18 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"code\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"github\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"popup\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 3 pages info: found 0 asset files warn: \"options\" property is deprecated, use config.get(key) instead info: >> generation finished with success in 0.7s ! # 查看简单的目录结构 $ tree -L 3 . ├── _book │ ├── gitbook │ │ ├── fonts │ │ ├── gitbook.js │ │ ├── gitbook-plugin-fontsettings │ │ ├── gitbook-plugin-highlight │ │ ├── gitbook-plugin-lunr │ │ ├── gitbook-plugin-search │ │ ├── gitbook-plugin-sharing │ │ ├── images │ │ ├── style.css │ │ └── theme.js │ ├── index.html │ └── search_index.json ├── README.md └── SUMMARY.md 安装插件 在书籍的配置文件（后续有配置相关文章）配置好需要的 Gitbook 插件，执行 gitbook install 就可以在线安装相关插件了。 $ gitbook install info: installing 15 plugins using npm@3.9.2 info: info: installing plugin \"highlight\" ...... 出现这样的输出后，就等待插件安装完成就可以使用了，如果插件配置错误，会中途直接报错停止，需要解决错误后才可以继续安装。 本地静态电子书预览 使用 gitbook serve 命令开启进行本地网页预览服务，执行后会默认执行 gitbook build 命令，然后本地开启一个端口 4000 的预览网页服务，此时可以通过浏览器访问本地机器 4000 端口进行电子书的浏览。 $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 21 plugins are installed info: 19 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"code\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"github\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"popup\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"livereload\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 3 pages info: found 0 asset files warn: \"options\" property is deprecated, use config.get(key) instead info: >> generation finished with success in 0.7s ! Starting server ... Serving book on http://localhost:4000 此时通过浏览器打开 http://localhost:4000 即可预览静态网页电子书 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 23:54:43 "},"4-directory-structure.html":{"url":"4-directory-structure.html","title":"目录结构","keywords":"","body":"简单介绍 本章来介绍一下 Gitbook 的目录结构，下面的目录结构表示了一个简单的 Gitbook 的目录结构。 . ├── book.json ├── README.md ├── SUMMARY.md ├── GLOSSARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md GitBook 目录文件的主要功能： 文件名 描述 book.json 配置数据 (可选) README.md 电子书的前言或简介 (必需) SUMMARY.md 电子书目录 (可选) GLOSSARY.md 词汇/注释术语列表 (可选) 菜单结构 SUMMARY.md 文件描述了书籍的菜单结构。 [] 指定菜单项目的标题 () 指定菜单文章文件的路径 支持子目录的方式，章节和子章节用两个、四个空格或者tab键来分级 # 或者 --- 进行不同 Part 的分类，分别由标题或者水平分割线方式表示不同的部分 区域导航定位，在章节 路径 md 文件结尾使用 # 号加上文章内容中章节的标题就能实现区域导航 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) ### Part II * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) ---- * [Last part without title](part3/title.md) 页面文件 Gitbook 书籍的页面文件采用 Markdown 的语法实现，电子书的第一页内容是从文件 README.md 中提取的。如果这个文件名没有出现在 SUMMARY 中，那么它会被添加为章节的第一个条目。对 Markdown 语法不熟悉的可以参考：MarkDown官方教程、 菜鸟教程。 参考示例： # Title of the chapter This is a great introduction. ## Section 1 Markdown will dictates _most_ of your **book's structure** ## Section 2 ... 页面顶部描述 它使用 YAML 格式的风格来定义文档的描述信息，在三条虚线之间，文档中也可以不写顶部描述，这个不是必须的。 参考示例： --- description: This is a short description of my page --- # The content of my page ... 专业术语列表 在 Gitbook 中使用 GLOSSARY.md 来进行专业术语列表的配置。将一些专业名词，名词或者术语的解释配置定义在文件中，在书籍中使用到对应专业术语的地方就可以链接到专业解释的地方。 定义的方式是在 GLOSSARY.md 使用 ## 列表来定义专业术语的列表。 参考示例： ## markdown Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。 这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 ## gitbook GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。 ## Term Definition for this term ## Another term With it's definition, this can contain bold text and all other kinds of inline markup ... 忽略文件 在 SUMMARY.md 中未列出的文件。所有静态文件，包含图片、JS、CSS都会复制到对应目录下，对于一些不需要的文件，GitBook将读取 .gitignore、.bookignore 和 .ignore 文件，以获取要忽略的文件和文件夹的列表。被忽略的文件不会被上传到版本中。这些文件的语法和 Git 中的 gitignore 语法相同。 参考示例： # This is a comment # Ignore the file test.md test.md # Ignore everything in the directory \"bin\" bin/* 以子目录的方式与项目集成 对于 Gitbook 书籍项目，可以使用子目录(如example-docs/)来存储项目的文档。您可以在 book.json 中通过配置选项告诉 GitBook 在那里找到根目录 注意：book.json 文件除外， book.json 文件所在位置代表的就是项目的根目录，但是可以将书籍项目的其他文件放置在子目录。 参考示例： 1. 项目目录结构： . ├── book.json └── example-docs/ ├── README.md └── SUMMARY.md 2. book.json 中的配置： { \"root\": \"./example-docs\" } Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 23:55:22 "},"5-config.html":{"url":"5-config.html","title":"配置和使用","keywords":"","body":"简述 本章主要介绍一下 Gitbook 中的相关配置以及说明。 Gitbook 使用了可选的 JSON 格式的配置文件来自定义书籍和文档的配置，这些配置选项通过 Gitbook项目根目录下的 book.json 文件来进行配置和指定。 配置概览 变量 说明 root 包含所有图书文件的根文件夹的路径，除了book.json title 书籍的标题，默认值从README中提取 description 您的书籍说明，默认值从自述文件中提取 author 作者姓名 isbn 书籍的国际码ISBN language ISO 语言规范中的语言规范定义，默认值是 en direction 文本的方向，可以是 rtl 或 ltr，默认值取决于 language 的值 gitbook GitBook的版本，使用SemVer规范并接受诸如 \">=3.0.0\" 的条件 structure 指定自述，摘要，词汇表等的路径 variables 这个选项定义书籍中的变量 links 在左侧导航栏添加指定的链接信息 styles 这个选项是用来自定义书本的css的 plugins 指定书籍使用的插件列表 pluginsConfig 配置指定插件的一些配置信息 配置示例 基础配置 Gitbook 基础的配置信息，通过下面的这个方式直接配置在 book.json 中。 参考示例： { \"root\":\".\", \"author\":\"JiangMing\", \"title\":\"JiangMing Gitbook\", \"language\":\"zh-hans\", \"description\":\"This is gitbook\", \"isbn\":\"000-0-00-000000-0\", \"direction\":\"ltr\", \"gitbook\":\">=3.2.3\" } structure 结构配置 除了 root 变量，你可以通过 structure 告诉Gitbook [Readme]，[Summary]，[Glossary]，[Languages]的文件名(而不是使用默认名称，如README.md)。这些文件必须在您的书籍项目的根目录。不接受像 doc/README.md 这样的子目录路径。 变量 说明 structure.readme 自述文件名(默认为“README.md”) structure.summary 摘要文件名(默认为“SUMMARY.md”) structure.glossary 词汇表文件名(默认为“GLOSSARY.md”) structure.languages 语言文件名(默认为LANGS.md) 参考示例： { \"structure\":{ \"readme\":\"README.md\", \"summary\":\"SUMMARY.md\", \"glossary\":\"GLOSSARY.md\", \"languages\":\"LANGS.md\" // 注意默认已经配置，在 gitbook—V3.2.3版本配置会报错, 可忽略 } } variables 变量配置 定义一些书籍中的变量信息，定义在 book.json 中的变量可以在 book 作用域下被访问，如：{{ book.blog }} 双括号语法在 书籍中 获取其中的数值。 参考示例： { \"variables\":{ \"blog\":\"https://blog.csdn.net/ming_97y\" } } links 链接导航 通过 links 配置在左侧导航栏添加指定的链接导航，如：添加自己的博客链接，GIthub链接等等... 参考示例： { \"links\":{ \"sidebar\":{ \"Blog\":\"https://blog.csdn.net/ming_97y\", \"Github\":\"https://github.com/jiangminggithub\" } } } styles 自定义样式 通过 styles 配置这个选项用来自定义书本的 css 的。 参考示例： { \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } } pdf 参数配置 PDF输出可以使用book.json中的 pdf 来进行配置： 变量 说明 pdf.pageNumbers 将页码添加到每个页面的底部(默认为true) pdf.fontSize 基本字体大小(默认为12) pdf.fontFamily 基本字体系列(默认为Arial) pdf.paperSize 纸张大小，选项为：\"a0\"，\"a1\"，\"a2\"，\"a3\"，\"a4\"，\"a5\"，\"a6\"，\"b0\"，\"b1\"，\"b2\"，\"b3\", \"b4\"，\"b5\"，\"b6\"，\"legal\"，\"letter\"，(默认为\"a4\") pdf.margin.top 顶部边距(默认为56) pdf.margin.bottom 底边距(默认为56) pdf.margin.right 右边距(默认为62) pdf.margin.left 左边距(默认为62) 参考示例： { \"pdf\":{ \"pageNumbers\":true, \"fontFamily\":\"Arial\", \"fontSize\":12, \"paperSize\":\"a4\", \"margin\":{ \"right\":62, \"left\":62, \"top\":56, \"bottom\":56 } } } plugins 插件列表 通过 plugins 配置可以配置书籍需要的插件列表。 参考示例： { \"plugins\": [ \"github\", \"splitter\", ... ] } pluginsConfig 插件配置 通过 插件配置 可以配置插件列表plugins中对应插件的一些配置选项信息。 参考示例： { \"plugins\": [\"github\"], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com\" } } } 参考配置示例 下面的这个是一个简单的 book.json 的配置，可供参考。 { \"root\": \".\", \"author\": \"JiangMing\", \"title\": \"JiangMing Gitbook\", \"language\": \"zh-hans\", \"description\": \"This is gitbook\", \"isbn\": \"000-0-00-000000-0\", \"direction\": \"ltr\", \"gitbook\": \">=3.2.3\", \"structure\": { \"readme\": \"README.md\", \"summary\": \"SUMMARY.md\", \"glossary\": \"GLOSSARY.md\" }, \"variables\": { \"blog\": \"https://blog.csdn.net/ming_97y\" }, \"links\": { \"sidebar\": { \"Blog\": \"https://blog.csdn.net/ming_97y\", \"Github\": \"https://github.com/jiangminggithub\" } }, \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" }, \"pdf\": { \"pageNumbers\": true, \"fontFamily\": \"Arial\", \"fontSize\": 12, \"paperSize\": \"a4\", \"margin\": { \"right\": 62, \"left\": 62, \"top\": 56, \"bottom\": 56 } }, \"plugins\": [ \"-lunr\", \"-search\", \"advanced-emoji\", \"search-plus\", \"github\", \"splitter\", \"anchor-navigation-ex\", \"chapter-fold\", \"expandable-chapters-small\", \"code\", \"alerts\", \"insert-logo\", \"flexible-alerts\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com\" }, \"insert-logo\": { \"url\": \"jim-logo.png\", \"style\": \"background: none; max-height: 100px; min-height: 30px\" }, \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } } Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 23:56:39 "},"6-plugins.html":{"url":"6-plugins.html","title":"插件配置和使用","keywords":"","body":"介绍 本章主要来详细的介绍一下 Gitbook 中的 插件 相关的配置和使用。在 Gitbook 中可以在书籍的配置文件 book.json 中来进行插件的相关配置。比如有很多好用的插件，可以很好的拓展书籍的外观，可用性或者其他方便的使用，所以接下来就一起来看看 Gitbook 中插件的使用吧。 配置的方法是在配置文件的 plugins 中添加需要的插件名称即可。 如下所示： \"plugins\": [ \"search\", \"highlight\", \"sharing\", \"font-settings\", \"livereload\", ... ] 默认插件 Gitbook 中默认带有 5 个插件： 名称 说明 highlight 语法高亮插件，代码高亮功能 search 搜索插件，不支持中文搜索 sharing 分享插件，右上角分享功能 font-settings 字体设置（最上方的\"A\"符号） livereload 热加载插件，为 GitBook 编辑进行实时重新预览加载 禁用自带的插件 如果需要去除或者禁用 Gitbook 中的某个插件，可以在插件名称前面加 - 。 如下所示： \"plugins\": [ \"-search\", \"-highlight\", \"-sharing\", \"-font-settings\", \"-livereload\", ... ] 添加插件列表 如果需要添加一些第三方的自定义插件，可以在 plugins 中添加需要的插件名称列表。 [!WARNING] 有的第三方的插件可能和默认的插件有重复，或者替代默认插件的，需要禁用对应的默认插件，具体用法一般参考对应插件的使用说明。 第三方插件使用的话，可能会破坏书籍的结构，所以使用上需要注意！ 例如： \"plugins\": [ \"-search\", \"advanced-emoji\", \"search-pro\", \"github\", \"splitter\", \"anchor-navigation-ex\", \"chapter-fold\", \"expandable-chapters-small\", \"code\", \"alerts\", \"insert-logo\", \"flexible-alerts\", ... ] 插件属性配置 pluginsConfig 配置插件的属性在书籍配置文件中的 pluginsConfig 中进行相关插件的属性配置。 例如：配置insert-logo 插件的相关属性 \"pluginsConfig\": { \"insert-logo\": { \"url\": \"jim-logo.png\", \"style\": \"background: none; max-height: 100px; min-height: 30px\" } } Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 23:58:13 "},"7-third-plugins.html":{"url":"7-third-plugins.html","title":"第三方实用插件","keywords":"","body":"实用插件 Gitbook 中的第三方插件有很多，在此就不进行一一的介绍了。下面就根据博主了解或者使用过的插件，简单整理一些实用的插件进行介绍一下吧。 第三方插件使用方法： 在配置文件 book.json 中添加 \"plugins\" 和 \"pluginConfig\" 字段，然后执行 gitbook install 来进行插件的安装 使用NPM安装 npm install gitbook-plugin-插件名 进行安装 从源码 GitHub 地址中下载，放到 node_modules 文件夹里安装 [!TIP|style:flat] 推荐使用配置文件 book.json 配置的方法进行安装，下面主要通过这种方式来进行介绍安装和配置第三方的插件的简单使用。 更详细的配置或者使用方法，以及效果图，请参考每一个插件后面贴出官方参考链接。 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 15:27:02 "},"chapter-plugins/1-insert-logo.html":{"url":"chapter-plugins/1-insert-logo.html","title":"1. 插入logo","keywords":"","body":"insert-logo 插入logo 将自己的logo图片插入到导航栏上方中，可以定制显示自己的 logo 标识。 配置使用方法： { \"plugins\": [ \"insert-logo\" ], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"./jim-logo.png\", \"style\": \"background: none; max-height: 100px; min-height: 30px\" } } } 插件 Github 地址：https://github.com/matusnovak/gitbook-plugin-insert-logo 效果预览： 参考本书左上角logo图标 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/2-favicon.html":{"url":"chapter-plugins/2-favicon.html","title":"2. 更改网站的图标","keywords":"","body":"favicon 更改网站的图标 自定义的网站图标的插件，可以将自己的 logo 图标设置为网站的图标。 配置使用方法： { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } 插件 Github 地址：https://github.com/menduo/gitbook-plugin-favicon 效果预览：参考本书的网页标签图标 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/3-search-pro.html":{"url":"chapter-plugins/3-search-pro.html","title":"3. 支持中文的高级搜索","keywords":"","body":"search-pro 高级搜索（支持中文） 支持中文搜索的插件, 使用此插件需要将默认的 search 和 lunr 插件去掉。 配置使用方法： { \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\" ] } 插件 Github 地址：https://github.com/gitbook-plugins/gitbook-plugin-search-pro 效果预览： Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/4-splitter.html":{"url":"chapter-plugins/4-splitter.html","title":"4. 侧边栏宽度可调节","keywords":"","body":"splitter 侧边栏宽度可调节 splitter 插件可以使左侧的侧边栏目录宽度可以自定义的调节。 配置使用方法： { \"plugins\": [\"splitter\"] } 插件 Github 地址：https://github.com/yoshidax/gitbook-plugin-splitter 效果预览： 参考本书的左侧边栏，可以调节宽度 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/5-github.html":{"url":"chapter-plugins/5-github.html","title":"5. 添加github图标","keywords":"","body":"github 在右上角添加github图标 github 插件会在右上角添加一个 github 的图标，可以通过插件属性配置链接，点击后可以进入自定义的链接页面。 配置使用方法： { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/jiangminggithub\" } } } 插件 Github 地址：https://github.com/GitbookIO/plugin-github 效果预览：参考本书的右上角 github 图标 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/6-copy-code-button.html":{"url":"chapter-plugins/6-copy-code-button.html","title":"6. 代码块复制按钮","keywords":"","body":"copy-code-button 代码复制按钮 为代码块添加一个可以复制的按钮。 配置使用方法： { \"plugins\": [\"copy-code-button\"] } 插件 Github 地址：https://github.com/WebEngage/gitbook-plugin-copy-code-button 效果预览： Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/7-code.html":{"url":"chapter-plugins/7-code.html","title":"7. 代码块添加行号和复制按钮","keywords":"","body":"code 代码添加行号&复制按钮 这个插件可以为代码块添加行号和复制按钮，单行代码情况无行号。 如果需要去除代码复制按钮，可在配置文件进行配置 copyButtons 属性为 false。 配置使用方法： { \"plugins\" : [ \"code\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 插件 Github 地址：https://github.com/TGhoul/gitbook-plugin-code 效果预览： { 1, 2, 3, ... } Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/8-alerts.html":{"url":"chapter-plugins/8-alerts.html","title":"8. 漂亮格式的提示块","keywords":"","body":"alerts 漂亮格式的提示块 这个插件可以将将块引用转换为漂亮的提示格式的信息。 配置使用方法： { \"plugins\": [\"alerts\"] } 目前支持 4 种提示的类型：info，warning，danger，success Info styling > **[info] For info** > > Use this for infomation messages. Warning styling > **[warning] For warning** > > Use this for warning messages. Danger styling > **[danger] For danger** > > Use this for danger messages. Success styling > **[success] For info** > > Use this for success messages. 插件参考地址：https://www.npmjs.com/package/gitbook-plugin-alerts 效果预览： Info styling： [info] For info Use this for infomation messages. Warning styling： [warning] For warning Use this for warning messages. Danger styling： [danger] For danger Use this for danger messages. Success styling： [success] For info Use this for success messages. Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/9-flexible-alerts.html":{"url":"chapter-plugins/9-flexible-alerts.html","title":"9. 高级格式显示的提示块","keywords":"","body":"flexible-alerts 高级格式显示的提示块 这个插件将块引用转换为漂亮的警报。可以在全局和警报特定级别配置外观，因此输出确实符合您的需求。此外，您还可以提供自己的警报类型（比如最后的comment）。 配置使用方法： { \"plugins\": [ \"flexible-alerts\" ], \"pluginsConfig\": { \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } } 用法： > [!type|style:xx|label:xx|icon:xx|className:xx|labelVisibility:xx|iconVisibility:xx] > 内容部分 字段介绍，如果不设置的表示选择默认，除了!type都不是必需的。 键 允许的值 说明 !type NOTE，TIP，WARNING和DANGER 警告级别设置 style 以下值之一: callout（默认）, flat 警告样式，见图19的左右不同 label 任何文字 警告块的标题位置，即Note这个字段位置（不支持中文） icon e.g. 'fa fa-info-circle' 一个有效的Font Awesome图标，那块小符号 className CSS类的名称 指定css文件，用于指定外观 labelVisibility 以下值之一：visible（默认），hidden 标签是否可见 iconVisibility 以下值之一：visible（默认），hidden 图标是否可见 1. 这是简单的用法 > [!NOTE] > 这是一个简单的Note类型的使用，所有的属性都是默认值。 --- 2. 这是自定义属性的用法 > [!NOTE|style:flat|lable:Mylable|iconVisibility:hidden] > \"!type\":`NOTE`、\"style\":`flat`、\"lable\":`自定义标签`、图标不可见 json 配置个性化，自定义一个COMMENT类型使用。 \"pluginsConfig\": { \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } 使用： > [!COMMENT] > An alert of type 'comment' using style 'callout' with default settings. 插件 Github 地址：https://github.com/fzankl/gitbook-plugin-flexible-alerts 效果预览： 简单的使用效果： Note: [!NOTE] 这是一个简单的Note类型的使用，所有的属性都是默认值。 TIP: [!TIP] 这是一个简单的Note类型的使用，所有的属性都是默认值。 WARNING: [!WARNING] 这是一个简单的Note类型的使用，所有的属性都是默认值。 DANGER: [!DANGER] 这是一个简单的Note类型的使用，所有的属性都是默认值。 自定义属性效果： [!NOTE|style:flat|lable:Mylable|iconVisibility:hidden] \"!type\":NOTE、\"style\":flat、\"lable\":自定义标签、图标不可见 个性化使用效果： [!COMMENT] An alert of type 'comment' using style 'callout' with default settings. Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-19 16:41:37 "},"chapter-plugins/10-auto-scroll-table.html":{"url":"chapter-plugins/10-auto-scroll-table.html","title":"10. 表格自动过长滚动条","keywords":"","body":"auto-scroll-table 自动表格过长滚动条 为避免表格过宽，在过宽的表格页面中增加滚动条。 配置使用方法： { \"plugins\": [\"auto-scroll-table\"] } 效果预览： 标题 内容 说明 11111111111111111111111111111111111111111111111111111111 222222222222222222222222222222222222222222 33333333333333333333333333333333333333333333333 444444444444444444444444444444444444444444444444444444444 555555555555555555555555555555555555555555555555555555 666666666666666666666666666666666666666666666666666666666666666 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/11-tbfed-pagefooter.html":{"url":"chapter-plugins/11-tbfed-pagefooter.html","title":"11. 页脚和版权","keywords":"","body":"tbfed-pagefooter 添加页脚和版权 可以添加页脚，版权信息。 配置使用方法： { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright ©JiangMing\", \"modify_label\": \"更新时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 如果想自定义一个链接说明，自己可以去index.js里，把 powered by gitbook，改成 powered by 你的说明内容 插件 Github 地址：https://github.com/zhj3618/gitbook-plugin-tbfed-pagefooter 效果预览，参考本页尾的【页脚和版权】效果。 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/12-hide-element.html":{"url":"chapter-plugins/12-hide-element.html","title":"12. 隐藏元素","keywords":"","body":"hide-element 隐藏元素 可以隐藏不想看到的元素，比如导航栏中 Published by GitBook 。 配置使用方法： { \"plugins\": [ \"hide-element\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] } } } 插件 Github 地址：https://github.com/gonjay/gitbook-plugin-hide-element 效果预览： Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/13-anchor-navigation-ex.html":{"url":"chapter-plugins/13-anchor-navigation-ex.html","title":"13. 悬浮目录和回到顶部","keywords":"","body":"anchor-navigation-ex 悬浮目录和回到顶部 插件功能： 给页面H1-H6标题增加锚点效果 浮动导航模式 页面内顶部导航模式 导航标题前的层级图标是否显示，自定义H1-H3的层级图标 plugins[\"theme-default\"],页面标题层级与官方默认主题的showLevel层级关联 plugins[\"theme-default\"],插件样式支持官网默认主题的三种样式：White、Sepia、Night 在页面中增加标签，会在此处生成TOC目录 在页面中增加标签，不会在该页面生成悬浮导航 config.printLog=true,打印当前的处理进度，排错很有用 config.multipleH1=false,去掉丑陋的多余的1. 序号（如过您的书籍遵循一个MD文件只有一个H1标签的话） config.showGoTop=true,显示返回顶部按钮 V1.0.11+ config.float.floatIcon 可以配置浮动导航的悬浮图标样式 V1.0.12+ 在页面中增加不会在该页面生成层级序号 V1.0.12+ 配置使用方法： { \"plugins\": [ \"anchor-navigation-ex\" ] } 插件 Github 地址：https://github.com/zq99299/gitbook-plugin-anchor-navigation-ex 效果预览： Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/14-back-to-top-button.html":{"url":"chapter-plugins/14-back-to-top-button.html","title":"14. 回到顶部按钮","keywords":"","body":"back-to-top-button 回到顶部按钮 可以在浏览文章到一定长度的时候，显示一个回到顶部的快捷按钮，点击可以快速回到文章顶部。 配置使用方法： { \"plugins\": [ \"back-to-top-button\" ] } 插件 Github 地址：https://github.com/stuebersystems/gitbook-plugin-back-to-top-button 效果预览： Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/15-prism.html":{"url":"chapter-plugins/15-prism.html","title":"15. 基于Prism的代码高亮","keywords":"","body":"prism 基于 Prism 的代码高亮 prism 基于 Prism 的代码高亮插件，可以为代码块配置不同的主题风格。 配置使用方法： { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"flow\": \"typescript\" }, \"ignore\": [ \"mermaid\", \"eval-js\" ] } } } 配置参数介绍： css：指定自定义主题的样式文件。 lang： 配置自定义语言前缀名，来混淆配置。 ignore：由于其他插件使用自定 lang 代码块的概念来表示其他功能，你可以忽略某些 langs。 插件 Github 地址：https://github.com/gaearon/gitbook-plugin-prism 效果预览： prism-okaidia.css预览： prism-solarizedlight.css预览： prism-tomorrow.css预览： 更多主题效果参考：https://github.com/gaearon/gitbook-plugin-prism Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-plugins/16-expandable-chapters-small.html":{"url":"chapter-plugins/16-expandable-chapters-small.html","title":"16. 折叠侧边栏菜单","keywords":"","body":"expandable-chapters-small 折叠侧边栏菜单 在左侧目录前面显示一个折叠的标志，可以进行折叠侧边栏。 实现这个功能的目前常见的有3个插件： chapter-fold：同时只能展开一个目录。 expandable-chapters：展开后不会自动折叠。 expandable-chapters-small：展开后不会自动折叠，箭头相比 expandable-chapters 会细一些。 配置使用方法： { plugins: [\"chapter-fold\"] } 或者 { plugins: [\"expandable-chapters\"] } 或者 { plugins: [\"expandable-chapters-small\"] } 插件 Github 地址：https://github.com/chrisjake/gitbook-plugin-expandable-chapters-small 效果预览：参考本书的左边菜单折叠效果 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 10:46:27 "},"chapter-plugins/17-more-plugins.html":{"url":"chapter-plugins/17-more-plugins.html","title":"17. 更多插件...","keywords":"","body":"更多插件参考 其他插件参考： ad 在每个页面顶部和底部添加广告或任何自定义内容：https://github.com/zhaoda/gitbook-plugin-ad sectionx 分离各个段落，并提供一个展开收起的按钮：https://github.com/ymcatar/gitbook-plugin-sectionx Puml 使用 PlantUML 展示 uml 图: https://github.com/GitbookIO/plugin-puml Graph 使用 function-plot 绘制数学函数图：https://github.com/cjam/gitbook-plugin-graph todo 添加 todo（选中框） 功能：https://github.com/ly-tools/gitbook-plugin-todo include-csv 展示 csv 文件内容：https://github.com/TakuroFukamizu/gitbook-plugin-include-csv musicxml 支持 musicxml 格式的乐谱渲染：https://github.com/ymcatar/gitbook-plugin-musicxml url-embed 嵌入动态内容：https://github.com/basilvetas/gitbook-plugin-url-embed valine 添加评论插件，valine官网：https://github.com/kevinkangkang/gitbook-plugin-valine baidu-tongji-with-multiple-channel 百度统计插件：https://github.com/snowdreams1006/gitbook-plugin-baidu-tongji-with-multiple-channel ... 关于第三方插件的介绍就到这里了，大家有兴趣的可以去查看一下：https://github.com/GitbookIO 更多的插件，请到 NPM Package 或者 GitHub 中查询 gitbook-plugin-xxx 使用。 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"8-export-book.html":{"url":"8-export-book.html","title":"导出电子书","keywords":"","body":"导出电子书 目前为止，Gitbook 支持如下输出： 静态HTML（静态网站） PDF格式 eBook格式 Mobi 格式 [!TIP|style:flat] 目前常见的电子书格式主要主要有三种(ePub, Mobi, PDF)，在 Gitbook 中导出这三种格式都依赖于系统本身提供的 ebook-convert 工具支持。但是新版的gitbook，官方已经不再提供支持，因此需要安装第三方的ebook-convert 工具。比较常用的 convert 有 calibre。 安装calibre calibre 官网：https://calibre-ebook.com 下载地址：http://calibre-ebook.com/download Linux sudo apt install calibre Mac 下载 Calibre.app。移动 calibre.app 到你的应用程序文件夹中后，给 ebook-convert 工具创建一个符号链接。 $ sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin 你可以把 /usr/bin 替换为 $PATH 中的任何的文件夹。 Windows 安装 calibre-4.5.0.msi 到本机环境，如果选择了默认配置，不需要配置环境变量。 ebook-convert –version D:\\gitbook> ebook-convert --version ebook-convert.exe (calibre 4.5.0) Created by: Kovid Goyal 有输出版本证明安装成功。 配置 pdf 可以使用 book.json 中的一组选项来定制PDF输出： 参数名 描述 pdf.pageNumbers 将页码添加到每个页面的底部（默认为 true） pdf.fontSize 基本字体大小（默认是 12） pdf.fontFamily 基本字体样式（默认是 Arial） pdf.paperSize 页面尺寸，选项有： 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' （默认值是 a4） pdf.margin.top 上边界（默认值是 56） pdf.margin.bottom 下边界（默认值是 56） pdf.margin.right 右边界（默认值是 62） pdf.margin.left 左边界（默认值是 62） 基本命令 [!Note|style:flat] 语法格式: gitbook build：导出静态网站HTML格式文件 gitbook pdf：导出PDF格式文件 gitbook epub：导出ePub格式文件 gitbook mobi：导出Mobi格式文件 简单示例： # 1. 生成 `html` 静态网站文件并输出 `debug` 级别日志 $ gitbook build --log=debug # 2. 生成 `pdf` 文件并输出 `debug` 级别日志 $ gitbook pdf book.pdf --log=debug # 3. 生成 `epub` 文件并输出 `debug` 级别日志 $ gitbook epub book.epub --log=debug # 4. 生成 `mobi` 文件并输出 `debug` 级别日志 $ gitbook mobi book.mobi --log=debug Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 13:49:45 "},"chapter-export-book/1-html.html":{"url":"chapter-export-book/1-html.html","title":"1. 输出静态网站","keywords":"","body":"导出书籍为HTML格式的静态网站 Gitbook 默认静态编译就是 HTML 格式的静态网站，默认导出文件到书籍目录的下的 _book 中。 在书籍目录终端中执行 gitbook build 命令就可以将书籍导出到目录 _bo0k 目录中HTML的静态网页HTML文件。 参考示例： # 静态编译导出HTML静态网站文件，如果需要查看生成日志过程，可以加上--log=debug $ gitbook build info: 28 plugins are installed info: 22 explicitly listed info: loading plugin \"insert-logo\"... OK info: loading plugin \"favicon\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"github\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"code\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"emphasize\"... OK info: loading plugin \"image-captions\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"flexible-alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"lightbox\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"prism\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 38 pages info: found 26 asset files warn: \"options\" property is deprecated, use config.get(key) instead warn: \"options.generator\" property is deprecated, use \"output.name\" instead warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead info: >> generation finished with success in 2.8s ! # 简单查看生成的_book目录 $ tree -L 1 . ├── _book ├── book.json ├── node_modules ├── README.md └── SUMMARY.md # 简单查看_book目录中的内容 $ cd _book $ tree -L 1 . ├── gitbook ├── index.html └── search_plus_index.json 效果预览 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2024-08-20 08:59:16 "},"chapter-export-book/2-pdf.html":{"url":"chapter-export-book/2-pdf.html","title":"2. 输出PDF文件","keywords":"","body":"导出书籍为PDF格式文件 相信大家对 PDF 格式的文件应该不会陌生的吧，在实际生活的场景中，PDF 文件也是比较常见的，比如电子发票，公告文档，材料文档，说明文档等等... 接下来就来介绍一下 Gitbook 中将书籍怎么导出成一个PDF格式的文件。在书籍目录终端中执行 git book pdf 命令就可以将书籍导出到书籍目录下的一个名称为 book.pdf 的文件了。 使用示例： # 将书籍导出到PDF文件，如果需要查看生成日志过程，可以加上--log=debug $ gitbook pdf info: 28 plugins are installed info: 22 explicitly listed info: loading plugin \"insert-logo\"... OK info: loading plugin \"favicon\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"github\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"code\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"emphasize\"... OK info: loading plugin \"image-captions\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"flexible-alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"lightbox\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"prism\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 38 pages info: found 28 asset files warn: \"options\" property is deprecated, use config.get(key) instead warn: \"options.generator\" property is deprecated, use \"output.name\" instead warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead info: >> generation finished with success in 11.9s ! info: >> 1 file(s) generated # 查看生成的book.pdf文件 $ tree -L 1 . ├── _book ├── book.json ├── book.pdf ├── images ├── node_modules ├── README.md └── SUMMARY.md 效果预览 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-export-book/3-epub.html":{"url":"chapter-export-book/3-epub.html","title":"3. 输出ePub文件","keywords":"","body":"导出书籍为ePub格式文件 说起 ePub 文件格式，相信大多数人还是比较不熟悉的，相比较 PDF 格式，ePub 格式在日常生活中使用的场景并没有那么平凡，所以这里简单给大家介绍一下 ePub 格式： ePub（Electronic Publication的缩写，意为：电子出版），是一个自由的开放标准，属于一种可以“自动重新编排”的内容。 百度百科中的简介： [!Note|style:flat] 电子出版（Electronic Publishing）是指以数字代码方式将图、文、声、像等信息编辑加工后存储在磁、光、电介质上，信息通过计算机或其他具有类似功能的设备读取使用的一种出版形式。电子出版（elektronisches Publizieren）分成在线电子出版（elektronisches Online-Publizieren）和离线电子出版（elektronisches Offline-Publizieren）两大类型。 通常包括前期策划、素材准备、美术设计、程序编制、后期制作或通过网络发送等环节。可见电子出版以计算机为生产工具，原作的大量复制也是以计算机为核心。这里，定义出版时所必需的编辑改为前期策划、素材准备和美术设计等。因此，与传统意义上的出版相比，电子出版包含了更复杂的劳动。工艺手段和技术含量也更高。 在书籍目录终端中执行 gitbook epub 命令就可以生成一个名称为 book.epub 的文件。 使用示例： # 将书籍导出到ePub文件，如果需要查看生成日志过程，可以加上--log=debug $ gitbook epub info: 28 plugins are installed info: 22 explicitly listed info: loading plugin \"insert-logo\"... OK info: loading plugin \"favicon\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"github\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"code\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"emphasize\"... OK info: loading plugin \"image-captions\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"flexible-alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"lightbox\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"prism\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 38 pages info: found 29 asset files warn: \"options\" property is deprecated, use config.get(key) instead warn: \"options.generator\" property is deprecated, use \"output.name\" instead warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead info: >> generation finished with success in 4.5s ! info: >> 1 file(s) generated # 查看生成的book.epub文件 $ tree -L 1 . ├── _book ├── book.epub ├── book.json ├── images ├── node_modules ├── README.md └── SUMMARY.md 效果预览 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "},"chapter-export-book/4-mobi.html":{"url":"chapter-export-book/4-mobi.html","title":"4. 输出Mobi文件","keywords":"","body":"导出书籍为Mobi格式文件 Mobi是什么文件格式？ mobi 格式是一种广泛流行于网络的电子书格式，是亚马逊电子书格式，可以用亚马逊电子设备打开观看，也可用电脑打开，但需要使用特定的工具才能打开。 在书籍目录终端中执行 gitbook mobi 命令就可以生成一个名称为 book.mobi 的文件。 使用示例： # 将书籍导出到Mobi文件，如果需要查看生成日志过程，可以加上--log=debug $ gitbook mobi info: 28 plugins are installed info: 22 explicitly listed info: loading plugin \"insert-logo\"... OK info: loading plugin \"favicon\"... OK info: loading plugin \"search-pro\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"github\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"code\"... OK info: loading plugin \"advanced-emoji\"... OK info: loading plugin \"emphasize\"... OK info: loading plugin \"image-captions\"... OK info: loading plugin \"anchor-navigation-expand\"... OK info: loading plugin \"alerts\"... OK info: loading plugin \"flexible-alerts\"... OK info: loading plugin \"auto-scroll-table\"... OK info: loading plugin \"lightbox\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"hide-element\"... OK info: loading plugin \"prism\"... OK info: loading plugin \"chapter-fold\"... OK info: loading plugin \"donate\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 38 pages info: found 31 asset files warn: \"options\" property is deprecated, use config.get(key) instead warn: \"options.generator\" property is deprecated, use \"output.name\" instead warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead info: >> generation finished with success in 6.0s ! info: >> 1 file(s) generated # 查看生成的book.mobi文件 $ tree -L 1 . ├── _book ├── book.json ├── book.mobi ├── node_modules ├── README.md └── SUMMARY.md 预览效果 Copyright ©yuanwei all right reserved，powered by Gitbook更新时间： 2021-04-16 20:11:00 "}}